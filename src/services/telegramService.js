const TelegramBot = require('node-telegram-bot-api');
const config = require('../config/config');
const confluenceService = require('./confluenceService');
const aiService = require('./aiService');
const batchAnalysisService = require('./batchAnalysisService');
const urlParser = require('../utils/urlParser');

// L∆∞u tr·ªØ tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng
const userStates = {};

// Bi·∫øn ƒë·ªÉ theo d√µi tin nh·∫Øn ƒë√£ x·ª≠ l√Ω
const processedMessages = {};

// Bi·∫øn ƒë·ªÉ theo d√µi xem bot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
let botInitialized = false;

// Kh·ªüi t·∫°o bot v√† x·ª≠ l√Ω c√°c l·ªánh
function initBot() {
  // Tr√°nh kh·ªüi t·∫°o nhi·ªÅu l·∫ßn
  if (botInitialized) {
    console.log('Telegram Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥, b·ªè qua.');
    return;
  }
  
  botInitialized = true;
  console.log('Kh·ªüi t·∫°o Telegram Bot...');

  // Kh·ªüi t·∫°o bot v·ªõi token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng v√† c√°c t√πy ch·ªçn
  let bot = null;
  
  try {
    bot = new TelegramBot(config.telegramBotToken, { 
      polling: true,
      polling_interval: 300,
      request: {
        timeout: 30000
      }
    });
  } catch (error) {
    console.error('L·ªói khi kh·ªüi t·∫°o Telegram Bot:', error);
    return null;
  }

  // X·ª≠ l√Ω l·ªánh /start
  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Confluence Agent Bot! ü§ñ\n\n' +
      'Bot n√†y gi√∫p b·∫°n ph√¢n t√≠ch n·ªôi dung trang Confluence v·ªõi AI, h·ªó tr·ª£ ph√¢n t√≠ch nhi·ªÅu trang c√πng l√∫c v√† t·ªïng h·ª£p k·∫øt qu·∫£ d·ª±a tr√™n prompt t√πy ch·ªânh.\n\n' +
      'C√°c l·ªánh c√≥ s·∫µn:\n' +
      '/analyze_batch - Ph√¢n t√≠ch m·ªôt ho·∫∑c nhi·ªÅu URL c√πng l√∫c\n' +
      '/set_prompt <prompt> - ƒê·∫∑t prompt t√πy ch·ªânh cho AI\n' +
      '/prompt <prompt> - ƒê·∫∑t prompt t√πy ch·ªânh (t∆∞∆°ng t·ª± /set_prompt)\n' +
      '/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n\n' +
      'üìù V√≠ d·ª•: G·ª≠i /analyze_batch, sau ƒë√≥ d√°n nhi·ªÅu URL (m·ªói URL m·ªôt d√≤ng)'
    );
  });

  // X·ª≠ l√Ω l·ªánh /help
  bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Confluence Agent Bot:\n\n' +
      'üìã *Ph√¢n t√≠ch m·ªôt trang Confluence*\n' +
      '1. G·ª≠i l·ªánh: /analyze_batch\n' +
      '2. G·ª≠i URL c·ªßa trang Confluence\n' +
      '3. Bot s·∫Ω ph√¢n t√≠ch v√† tr·∫£ v·ªÅ t√≥m t·∫Øt, t·ª´ kh√≥a v√† c√°c th√¥ng tin kh√°c\n\n' +
      'üìö *Ph√¢n t√≠ch nhi·ªÅu trang v·ªõi prompt t√πy ch·ªânh*\n' +
      '1. ƒê·∫∑t prompt t√πy ch·ªânh: /set_prompt <prompt c·ªßa b·∫°n>\n' +
      '2. G·ª≠i l·ªánh: /analyze_batch\n' +
      '3. G·ª≠i danh s√°ch URL (m·ªói URL m·ªôt d√≤ng)\n' +
      '4. Bot s·∫Ω ph√¢n t√≠ch t·∫•t c·∫£ c√°c trang v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ªïng h·ª£p\n\n' +
      'üîç *C√°c l·ªánh c√≥ s·∫µn*\n' +
      '/analyze_batch - Ph√¢n t√≠ch m·ªôt ho·∫∑c nhi·ªÅu URL c√πng l√∫c\n' +
      '/set_prompt <prompt> - ƒê·∫∑t prompt t√πy ch·ªânh cho AI\n' +
      '/prompt <prompt> - ƒê·∫∑t prompt t√πy ch·ªânh (t∆∞∆°ng t·ª± /set_prompt)\n' +
      '/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n\n' +
      'üí° *V√≠ d·ª• prompt hi·ªáu qu·∫£*\n' +
      '/set_prompt So s√°nh c√°c t√≠nh nƒÉng ƒë∆∞·ª£c m√¥ t·∫£ trong c√°c trang n√†y v√† ƒë∆∞a ra ƒë·ªÅ xu·∫•t\n' +
      '/set_prompt T·ªïng h·ª£p c√°c v·∫•n ƒë·ªÅ v√† gi·∫£i ph√°p t·ª´ c√°c trang n√†y\n' +
      '/set_prompt Ph√¢n t√≠ch c√°c t√≠nh nƒÉng ƒë∆∞·ª£c m√¥ t·∫£ trong c√°c trang, so s√°nh ∆∞u v√† nh∆∞·ª£c ƒëi·ªÉm, v√† ƒë·ªÅ xu·∫•t c√°ch c·∫£i thi·ªán',
      { parse_mode: 'Markdown' }
    );
  });

  // H√†m x·ª≠ l√Ω tin nh·∫Øn chung ƒë·ªÉ tr√°nh tr√πng l·∫∑p
  const processMessage = async (msg, handler) => {
    if (!msg.text) return;
    
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    
    // T·∫°o ID duy nh·∫•t cho m·ªói tin nh·∫Øn
    const uniqueId = `${chatId}_${messageId}`;
    
    // Ki·ªÉm tra n·∫øu tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    if (processedMessages[uniqueId]) {
      console.log(`Tin nh·∫Øn ${uniqueId} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω, b·ªè qua`);
      return;
    }
    
    // ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    processedMessages[uniqueId] = true;
    
    // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc c·ªßa processedMessages
    const keys = Object.keys(processedMessages);
    if (keys.length > 1000) {
      const oldestKey = keys[0];
      delete processedMessages[oldestKey];
    }
    
    // G·ªçi handler ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn
    await handler(msg);
  };

  // X·ª≠ l√Ω l·ªánh /set_prompt
  bot.onText(/\/set_prompt (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const newPrompt = match[1].trim();
    
    // L∆∞u prompt m·ªõi cho ng∆∞·ªùi d√πng
    userStates[chatId] = {
      ...userStates[chatId],
      lastPrompt: newPrompt
    };
    
    // Escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát cho MarkdownV2
    const escapedPrompt = newPrompt.replace(/[_*\[\]()~`>#+\-=|{}.!]/g, '\\$&');
    
    bot.sendMessage(
      chatId,
      `‚úÖ *ƒê√£ c·∫≠p nh·∫≠t prompt th√†nh c√¥ng*\n\nPrompt m·ªõi: "${escapedPrompt}"\n\n` +
      `üí° *C√°ch s·ª≠ d·ª•ng*: G·ª≠i l·ªánh /analyze_batch, sau ƒë√≥ g·ª≠i danh s√°ch URL (m·ªói URL m·ªôt d√≤ng) ƒë·ªÉ ph√¢n t√≠ch v·ªõi prompt n√†y.`,
      { parse_mode: 'Markdown' }
    );
  });
  
  // X·ª≠ l√Ω l·ªánh /prompt kh√¥ng c√≥ tham s·ªë
  bot.onText(/\/prompt$/, async (msg) => {
    const chatId = msg.chat.id;
    
    // Hi·ªÉn th·ªã prompt hi·ªán t·∫°i n·∫øu c√≥
    const currentPrompt = userStates[chatId]?.lastPrompt || 'T√≥m t·∫Øt n·ªôi dung trang n√†y m·ªôt c√°ch ng·∫Øn g·ªçn.';
    
    bot.sendMessage(
      chatId,
      `üí¨ *Prompt hi·ªán t·∫°i*\n\n"${currentPrompt}"\n\n` +
      `ƒê·ªÉ thay ƒë·ªïi prompt, s·ª≠ d·ª•ng l·ªánh: /set_prompt <prompt m·ªõi>\n\n` +
      `üí° *V√≠ d·ª• prompt hi·ªáu qu·∫£*:\n` +
      `- /set_prompt So s√°nh c√°c t√≠nh nƒÉng ƒë∆∞·ª£c m√¥ t·∫£ trong c√°c trang n√†y\n` +
      `- /set_prompt T·ªïng h·ª£p c√°c v·∫•n ƒë·ªÅ v√† gi·∫£i ph√°p t·ª´ c√°c trang n√†y\n` +
      `- /set_prompt Ph√¢n t√≠ch ∆∞u v√† nh∆∞·ª£c ƒëi·ªÉm c·ªßa c√°c t√≠nh nƒÉng ƒë∆∞·ª£c m√¥ t·∫£`,
      { parse_mode: 'Markdown' }
    );
  });
  
  // X·ª≠ l√Ω l·ªánh /prompt v·ªõi tham s·ªë
  bot.onText(/\/prompt (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const newPrompt = match[1].trim();
    
    // L∆∞u prompt m·ªõi cho ng∆∞·ªùi d√πng
    userStates[chatId] = {
      ...userStates[chatId],
      lastPrompt: newPrompt
    };
    
    bot.sendMessage(
      chatId,
      `‚úÖ *ƒê√£ c·∫≠p nh·∫≠t prompt th√†nh c√¥ng*\n\nPrompt m·ªõi: "${newPrompt}"\n\n` +
      `üí° *C√°ch s·ª≠ d·ª•ng*: G·ª≠i l·ªánh /analyze_batch, sau ƒë√≥ g·ª≠i danh s√°ch URL (m·ªói URL m·ªôt d√≤ng) ƒë·ªÉ ph√¢n t√≠ch v·ªõi prompt n√†y.`,
      { parse_mode: 'Markdown' }
    );
  });
  
  // X·ª≠ l√Ω l·ªánh /analyze_batch
  bot.onText(/\/analyze_batch(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    
    // Ki·ªÉm tra xem ƒë√£ c√≥ URL trong l·ªánh ch∆∞a
    const urlInput = match && match[1] ? match[1].trim() : null;
    
    if (urlInput) {
      // N·∫øu c√≥ URL trong l·ªánh, x·ª≠ l√Ω ngay
      try {
        bot.sendMessage(chatId, 'üîé ƒêang ph√¢n t√≠ch URL... Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t.');
        
        // Ph√¢n t√≠ch URL ƒë∆°n
        const urls = [urlInput];
        const results = await batchAnalysisService.analyzeBatch(urls, {
          useAi: true,
          customPrompt: userStates[chatId]?.lastPrompt || 'T√≥m t·∫Øt n·ªôi dung trang n√†y m·ªôt c√°ch ng·∫Øn g·ªçn.'
        });
        
        // Ki·ªÉm tra n·∫øu c√≥ k·∫øt qu·∫£ t·ªïng h·ª£p
        if (results.combinedAnalysis) {
          await bot.sendMessage(
            chatId,
            `ü§ñ *Ph√¢n t√≠ch d·ª±a tr√™n prompt*\n\n${results.combinedAnalysis}\n\n` +
            `üîó Xem trang g·ªëc: ${results.results[0].url}`,
            { parse_mode: 'Markdown' }
          );
          
          // L∆∞u tr·ªØ n·ªôi dung trang v√†o tr·∫°ng th√°i ng∆∞·ªùi d√πng ƒë·ªÉ c√≥ th·ªÉ h·ªèi th√™m
          userStates[chatId] = {
            pageId: results.results[0].pageId,
            pageTitle: results.results[0].pageTitle,
            content: results.results[0].content,
            lastPrompt: userStates[chatId]?.lastPrompt || 'T√≥m t·∫Øt n·ªôi dung trang n√†y m·ªôt c√°ch ng·∫Øn g·ªçn.'
          };
        } 
        // N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ t·ªïng h·ª£p, hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ng trang
        else if (results.successCount > 0) {
          const result = results.results[0];
          
          // L∆∞u tr·ªØ n·ªôi dung trang v√†o tr·∫°ng th√°i ng∆∞·ªùi d√πng ƒë·ªÉ c√≥ th·ªÉ h·ªèi th√™m
          userStates[chatId] = {
            pageId: result.pageId,
            pageTitle: result.pageTitle,
            content: result.content,
            lastPrompt: userStates[chatId]?.lastPrompt || 'T√≥m t·∫Øt n·ªôi dung trang n√†y m·ªôt c√°ch ng·∫Øn g·ªçn.'
          };
          
          // G·ª≠i k·∫øt qu·∫£
          bot.sendMessage(
            chatId,
            `üìù *${result.pageTitle}*\n` +
            `ID: ${result.pageId}\n\n` +
            `${result.summary}\n\n` +
            `üîó Xem trang g·ªëc: ${result.url}\n\n` +
            'üí¨ B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi th√™m v·ªÅ n·ªôi dung trang n√†y.',
            { parse_mode: 'Markdown' }
          );
        } else if (results.errors.length > 0) {
          bot.sendMessage(chatId, `‚ö†Ô∏è *L·ªói khi ph√¢n t√≠ch*\n\n${results.errors[0].error}`, { parse_mode: 'Markdown' });
        }
      } catch (error) {
        console.error('L·ªói khi ph√¢n t√≠ch URL:', error);
        bot.sendMessage(chatId, `‚ö†Ô∏è *ƒê√£ x·∫£y ra l·ªói*\n\n${error.message}`, { parse_mode: 'Markdown' });
      }
    } else {
      // N·∫øu kh√¥ng c√≥ URL, y√™u c·∫ßu ng∆∞·ªùi d√πng g·ª≠i danh s√°ch URL
      userStates[chatId] = {
        ...userStates[chatId],
        waitingForBatchUrls: true,
        lastPrompt: userStates[chatId]?.lastPrompt || 'T√≥m t·∫Øt n·ªôi dung trang n√†y m·ªôt c√°ch ng·∫Øn g·ªçn.' // S·ª≠ d·ª•ng prompt hi·ªán t·∫°i ho·∫∑c m·∫∑c ƒë·ªãnh
      };
      
      bot.sendMessage(
        chatId,
        'üìù *Ph√¢n t√≠ch nhi·ªÅu trang Confluence*\n\n' +
        'Vui l√≤ng g·ª≠i danh s√°ch URL ho·∫∑c ID trang Confluence (m·ªói URL m·ªôt d√≤ng).\n\n' +
        'üëâ *V√≠ d·ª•:*\n```\nhttps://your-domain.atlassian.net/wiki/spaces/ABC/pages/123456\nhttps://your-domain.atlassian.net/wiki/spaces/ABC/pages/789012\n```\n\n' +
        'üí° *M·∫πo:* B·∫°n c√≥ th·ªÉ ƒë·∫∑t prompt t√πy ch·ªânh tr∆∞·ªõc b·∫±ng l·ªánh `/set_prompt`',
        { parse_mode: 'Markdown' }
      );
    }
  });

  // X·ª≠ l√Ω tin nh·∫Øn th√¥ng th∆∞·ªùng
  // H√†m escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát cho MarkdownV2
  const escapeMarkdown = (text) => {
    if (!text) return '';
    return text.replace(/[_*\[\]()~`>#+\-=|{}.!]/g, '\\$&');
  };
  
  bot.on('message', (msg) => {
    // B·ªè qua c√°c l·ªánh
    if (msg.text && msg.text.startsWith('/')) return;
    
    processMessage(msg, async (msg) => {
      const chatId = msg.chat.id;
      const messageText = msg.text;
      
      // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒëang ch·ªù xem chi ti·∫øt
      if (userStates[chatId] && userStates[chatId].waitingForDetailView) {
        // X√≥a tr·∫°ng th√°i ch·ªù
        userStates[chatId].waitingForDetailView = false;
        
        // N·∫øu ng∆∞·ªùi d√πng mu·ªën xem chi ti·∫øt
        if (messageText.toLowerCase() === 'xem chi ti·∫øt') {
          const results = userStates[chatId].batchResults;
          
          if (results && results.results) {
            await bot.sendMessage(chatId, 'üìù *K·∫øt qu·∫£ chi ti·∫øt cho t·ª´ng trang*', { parse_mode: 'Markdown' });
            
            // G·ª≠i k·∫øt qu·∫£ cho t·ª´ng URL th√†nh c√¥ng
            for (const result of results.results) {
              await bot.sendMessage(
                chatId,
                `üìù *${result.pageTitle}*\n` +
                `ID: ${result.pageId}\n\n` +
                `${result.summary}\n\n` +
                `üîó [Xem trang g·ªëc](${result.url})`,
                { parse_mode: 'Markdown' }
              );
              
              // ƒê·ª£i m·ªôt ch√∫t gi·ªØa c√°c tin nh·∫Øn ƒë·ªÉ tr√°nh gi·ªõi h·∫°n t·ªëc ƒë·ªô c·ªßa Telegram
              await new Promise(resolve => setTimeout(resolve, 500));
            }
          } else {
            bot.sendMessage(chatId, '‚ö†Ô∏è Kh√¥ng c√≤n l∆∞u k·∫øt qu·∫£ chi ti·∫øt. Vui l√≤ng ph√¢n t√≠ch l·∫°i.');
          }
          
          // X√≥a k·∫øt qu·∫£ h√†ng lo·∫°t ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ
          delete userStates[chatId].batchResults;
          return;
        }
        
        // X√≥a k·∫øt qu·∫£ h√†ng lo·∫°t ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ
        delete userStates[chatId].batchResults;
        return; // Tr√°nh x·ª≠ l√Ω tin nh·∫Øn n√†y nh∆∞ m·ªôt c√¢u h·ªèi th√¥ng th∆∞·ªùng
      }
      
      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ch·ªù g·ª≠i danh s√°ch URL kh√¥ng
      if (userStates[chatId] && userStates[chatId].waitingForBatchUrls) {
        // X·ª≠ l√Ω danh s√°ch URL s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi handler ri√™ng
        return;
      }
      
      // X·ª≠ l√Ω c√¢u h·ªèi th√¥ng th∆∞·ªùng
      if (!userStates[chatId] || !userStates[chatId].content) {
        return bot.sendMessage(
          chatId, 
          'üí¨ Vui l√≤ng ph√¢n t√≠ch m·ªôt trang Confluence tr∆∞·ªõc b·∫±ng l·ªánh /analyze_batch <URL>'
        );
      }
      
      try {
        bot.sendMessage(chatId, 'ü§ñ ƒêang x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n...');
        
        // T·∫°o prompt m·ªõi d·ª±a tr√™n c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
        const questionPrompt = `D·ª±a tr√™n n·ªôi dung trang Confluence, h√£y tr·∫£ l·ªùi c√¢u h·ªèi sau: ${messageText}`;
        
        // L∆∞u prompt m·ªõi
        userStates[chatId].lastPrompt = questionPrompt;
        
        // T·∫°o ph√¢n t√≠ch m·ªõi v·ªõi prompt m·ªõi
        const answer = await aiService.generateAiSummary(
          userStates[chatId].content, 
          questionPrompt
        );
        
        // G·ª≠i k·∫øt qu·∫£
        bot.sendMessage(
          chatId,
          `üìù *${userStates[chatId].pageTitle}*\n\n${answer}\n\n` +
          `üëâ B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c ƒë·∫∑t c√¢u h·ªèi ho·∫∑c s·ª≠ d·ª•ng /analyze_batch ƒë·ªÉ ph√¢n t√≠ch trang m·ªõi.`,
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        console.error('L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi:', error);
        bot.sendMessage(
          chatId, 
          `‚ö†Ô∏è *ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi*\n\n${error.message}\n\nVui l√≤ng th·ª≠ l·∫°i ho·∫∑c ph√¢n t√≠ch trang kh√°c.`,
          { parse_mode: 'Markdown' }
        );
      }
    });
  });
  
  // X·ª≠ l√Ω khi nh·∫≠n danh s√°ch URL cho ph√¢n t√≠ch h√†ng lo·∫°t
  bot.on('message', (msg) => {
    // B·ªè qua c√°c l·ªánh
    if (msg.text && msg.text.startsWith('/')) return;
    
    // Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn khi ng∆∞·ªùi d√πng ƒëang ch·ªù g·ª≠i danh s√°ch URL
    const chatId = msg.chat.id;
    if (!userStates[chatId] || !userStates[chatId].waitingForBatchUrls) {
      return;
    }
    
    processMessage(msg, async (msg) => {
      const chatId = msg.chat.id;
      const messageText = msg.text;
      
      // ƒê·∫∑t l·∫°i tr·∫°ng th√°i ch·ªù URL
      userStates[chatId].waitingForBatchUrls = false;
      
      // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ch·ª©a danh s√°ch URL kh√¥ng
      const urls = messageText.split('\n').filter(url => url.trim() !== '');
      
      if (urls.length === 0) {
        return bot.sendMessage(chatId, '‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y URL n√†o. Vui l√≤ng th·ª≠ l·∫°i v·ªõi /analyze_batch');
      }
      
      try {
        // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω v·ªõi s·ªë l∆∞·ª£ng URL
        bot.sendMessage(
          chatId, 
          `üîé *ƒêang ph√¢n t√≠ch ${urls.length} URL*\n\nQu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t t√πy thu·ªôc v√†o s·ªë l∆∞·ª£ng trang...`,
          { parse_mode: 'Markdown' }
        );
        
        // L·∫•y prompt hi·ªán t·∫°i ho·∫∑c s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh
        const currentPrompt = userStates[chatId]?.lastPrompt || 'T√≥m t·∫Øt n·ªôi dung trang n√†y m·ªôt c√°ch ng·∫Øn g·ªçn.';
        
        // Ph√¢n t√≠ch h√†ng lo·∫°t
        const results = await batchAnalysisService.analyzeBatch(urls, {
          useAi: true,
          customPrompt: currentPrompt
        });
        
        // G·ª≠i th·ªëng k√™
        bot.sendMessage(
          chatId,
          `üìä *K·∫øt qu·∫£ ph√¢n t√≠ch h√†ng lo·∫°t*\n\n` +
          `‚Ä¢ T·ªïng s·ªë URL: ${results.totalProcessed}\n` +
          `‚Ä¢ Th√†nh c√¥ng: ${results.successCount}\n` +
          `‚Ä¢ L·ªói: ${results.errorCount}\n\n` +
          `üí¨ Prompt ƒë√£ s·ª≠ d·ª•ng: "${currentPrompt}"`,
          { parse_mode: 'Markdown' }
        );
        
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ tr√°nh gi·ªõi h·∫°n t·ªëc ƒë·ªô c·ªßa Telegram
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // G·ª≠i k·∫øt qu·∫£ ph√¢n t√≠ch t·ªïng h·ª£p n·∫øu c√≥
        if (results.combinedAnalysis) {
          // Escape n·ªôi dung cho Markdown
          const escapedAnalysis = escapeMarkdown(results.combinedAnalysis);
          const escapedPrompt = escapeMarkdown(currentPrompt);
          
          await bot.sendMessage(
            chatId,
            `ü§ñ *Ph√¢n t√≠ch t·ªïng h·ª£p d·ª±a tr√™n prompt*\n\n${escapedAnalysis}\n\n` +
            `‚ú® *Prompt ƒë√£ s·ª≠ d·ª•ng:* "${escapedPrompt}"`,
            { parse_mode: 'Markdown' }
          );
          
          // L∆∞u trang ƒë·∫ßu ti√™n v√†o tr·∫°ng th√°i ng∆∞·ªùi d√πng ƒë·ªÉ c√≥ th·ªÉ h·ªèi th√™m
          if (results.results.length > 0) {
            userStates[chatId] = {
              ...userStates[chatId],
              pageId: results.results[0].pageId,
              pageTitle: results.results[0].pageTitle,
              content: results.results[0].content,
              lastPrompt: currentPrompt
            };
          }
          
          // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ tr√°nh gi·ªõi h·∫°n t·ªëc ƒë·ªô c·ªßa Telegram
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën xem k·∫øt qu·∫£ chi ti·∫øt cho t·ª´ng trang kh√¥ng
          if (results.results.length > 1) {
            await bot.sendMessage(
              chatId,
              'üëâ B·∫°n c√≥ mu·ªën xem k·∫øt qu·∫£ chi ti·∫øt cho t·ª´ng trang kh√¥ng? G·ª≠i "Xem chi ti·∫øt" ƒë·ªÉ hi·ªÉn th·ªã ho·∫∑c b·∫•t k·ª≥ tin nh·∫Øn kh√°c ƒë·ªÉ b·ªè qua.'
            );
            
            // L∆∞u tr·∫°ng th√°i ch·ªù xem chi ti·∫øt
            userStates[chatId].waitingForDetailView = true;
            userStates[chatId].batchResults = results;
            return;
          }
        }
        // N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ t·ªïng h·ª£p, hi·ªÉn th·ªã k·∫øt qu·∫£ cho t·ª´ng URL
        else {
          // G·ª≠i k·∫øt qu·∫£ cho t·ª´ng URL th√†nh c√¥ng
          for (const result of results.results) {
            await bot.sendMessage(
              chatId,
              `üìù *${result.pageTitle}*\n` +
              `ID: ${result.pageId}\n\n` +
              `${result.summary}\n\n` +
              `üîó Xem trang g·ªëc: ${result.url}`,
              { parse_mode: 'MarkdownV2' }
            );
            
            // ƒê·ª£i m·ªôt ch√∫t gi·ªØa c√°c tin nh·∫Øn ƒë·ªÉ tr√°nh gi·ªõi h·∫°n t·ªëc ƒë·ªô c·ªßa Telegram
            await new Promise(resolve => setTimeout(resolve, 500));
          }
          
          // L∆∞u trang ƒë·∫ßu ti√™n v√†o tr·∫°ng th√°i ng∆∞·ªùi d√πng ƒë·ªÉ c√≥ th·ªÉ h·ªèi th√™m
          if (results.results.length > 0) {
            userStates[chatId] = {
              ...userStates[chatId],
              pageId: results.results[0].pageId,
              pageTitle: results.results[0].pageTitle,
              content: results.results[0].content,
              lastPrompt: currentPrompt
            };
          }
        }
        
        // G·ª≠i danh s√°ch l·ªói n·∫øu c√≥
        if (results.errors.length > 0) {
          // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng l·ªói hi·ªÉn th·ªã ƒë·ªÉ tr√°nh tin nh·∫Øn qu√° d√†i
          const maxErrorsToShow = 5;
          const errorMessages = results.errors
            .slice(0, maxErrorsToShow)
            .map(err => `- ${err.url || 'URL kh√¥ng x√°c ƒë·ªãnh'}: ${err.error}`)
            .join('\n');
          
          const additionalErrors = results.errors.length > maxErrorsToShow 
            ? `\n\n...v√† ${results.errors.length - maxErrorsToShow} l·ªói kh√°c` 
            : '';
          
          await bot.sendMessage(
            chatId,
            `‚ö†Ô∏è *C√°c l·ªói ph√¢n t√≠ch*\n\n${errorMessages}${additionalErrors}\n\nVui l√≤ng ki·ªÉm tra l·∫°i c√°c URL v√† th·ª≠ l·∫°i.`,
            { parse_mode: 'Markdown' }
          );
        }
        
        // G·ª≠i th√¥ng b√°o ho√†n th√†nh
        if (results.successCount > 0) {
          bot.sendMessage(
            chatId,
            '‚úÖ *Ph√¢n t√≠ch ho√†n t·∫•t*\n\nB·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c ƒë·∫∑t c√¢u h·ªèi ho·∫∑c ph√¢n t√≠ch trang m·ªõi b·∫±ng l·ªánh /analyze_batch',
            { parse_mode: 'Markdown' }
          );
        }
      } catch (error) {
        console.error('L·ªói khi ph√¢n t√≠ch h√†ng lo·∫°t:', error);
        bot.sendMessage(
          chatId, 
          `‚ö†Ô∏è *ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch*\n\n${error.message}\n\nVui l√≤ng ki·ªÉm tra l·∫°i c√°c URL v√† th·ª≠ l·∫°i.`,
          { parse_mode: 'Markdown' }
        );
      }
    });
  });

  console.log('Telegram Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!');
  return bot;
}

module.exports = {
  initBot
};
