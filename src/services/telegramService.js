const TelegramBot = require('node-telegram-bot-api');
const config = require('../config/config');
const confluenceService = require('./confluenceService');
const aiService = require('./aiService');
const batchAnalysisService = require('./batchAnalysisService');
const urlParser = require('../utils/urlParser');

// Kh·ªüi t·∫°o bot v·ªõi token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const bot = new TelegramBot(config.telegramBotToken, { polling: true });

// L∆∞u tr·ªØ tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng
const userStates = {};

// Kh·ªüi t·∫°o bot v√† x·ª≠ l√Ω c√°c l·ªánh
function initBot() {
  console.log('Kh·ªüi t·∫°o Telegram Bot...');

  // X·ª≠ l√Ω l·ªánh /start
  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Confluence Agent Bot! ü§ñ\n\n' +
      'Bot n√†y gi√∫p b·∫°n ph√¢n t√≠ch n·ªôi dung trang Confluence v·ªõi AI.\n\n' +
      'C√°c l·ªánh c√≥ s·∫µn:\n' +
      '/analyze_batch - Ph√¢n t√≠ch m·ªôt ho·∫∑c nhi·ªÅu URL c√πng l√∫c\n' +
      '/prompt <prompt> - ƒê·∫∑t prompt cho AI\n' +
      '/set_prompt <prompt> - ƒê·∫∑t prompt cho AI (t∆∞∆°ng t·ª± /prompt)\n' +
      '/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p'
    );
  });

  // X·ª≠ l√Ω l·ªánh /help
  bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Confluence Agent Bot:\n\n' +
      '1. S·ª≠ d·ª•ng l·ªánh /analyze_batch ƒë·ªÉ ph√¢n t√≠ch m·ªôt ho·∫∑c nhi·ªÅu URL\n' +
      '2. S·ª≠ d·ª•ng l·ªánh /set_prompt ƒë·ªÉ ƒë·∫∑t prompt t√πy ch·ªânh cho AI\n' +
      '3. G·ª≠i nhi·ªÅu URL (m·ªói URL m·ªôt d√≤ng) sau khi g·ªçi /analyze_batch\n' +
      '4. B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c ƒë·∫∑t c√¢u h·ªèi v·ªÅ n·ªôi dung trang sau khi ƒë√£ ph√¢n t√≠ch\n\n' +
      'C√°c l·ªánh c√≥ s·∫µn:\n' +
      '/analyze_batch - Ph√¢n t√≠ch m·ªôt ho·∫∑c nhi·ªÅu URL c√πng l√∫c\n' +
      '/prompt <prompt> - ƒê·∫∑t prompt cho AI\n' +
      '/set_prompt <prompt> - ƒê·∫∑t prompt cho AI (t∆∞∆°ng t·ª± /prompt)\n' +
      '/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n\n' +
      'V√≠ d·ª• prompt:\n' +
      '/set_prompt So s√°nh c√°c t√≠nh nƒÉng ƒë∆∞·ª£c m√¥ t·∫£ trong c√°c trang n√†y v√† ƒë∆∞a ra ƒë·ªÅ xu·∫•t\n' +
      '/set_prompt T·ªïng h·ª£p c√°c v·∫•n ƒë·ªÅ v√† gi·∫£i ph√°p t·ª´ c√°c trang n√†y'
    );
  });


  // X·ª≠ l√Ω l·ªánh /prompt
  bot.onText(/\/prompt (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const newPrompt = match[1].trim();
    
    if (!userStates[chatId]) {
      return bot.sendMessage(
        chatId, 
        'Vui l√≤ng ph√¢n t√≠ch m·ªôt trang Confluence tr∆∞·ªõc b·∫±ng l·ªánh /analyze_batch <URL>'
      );
    }
    
    // L∆∞u prompt m·ªõi cho ng∆∞·ªùi d√πng
    userStates[chatId].lastPrompt = newPrompt;
    
    bot.sendMessage(
      chatId,
      `‚úÖ *ƒê√£ c·∫≠p nh·∫≠t prompt th√†nh c√¥ng*\n\nPrompt m·ªõi: "${newPrompt}"\n\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng /analyze_batch ƒë·ªÉ ph√¢n t√≠ch trang Confluence v·ªõi prompt n√†y.`,
      { parse_mode: 'Markdown' }
    );
    
    // N·∫øu ƒë√£ c√≥ n·ªôi dung trang, ph√¢n t√≠ch l·∫°i v·ªõi prompt m·ªõi
    if (userStates[chatId].content) {
      try {
        bot.sendMessage(chatId, 'ƒêang ph√¢n t√≠ch l·∫°i trang v·ªõi prompt m·ªõi...');
        
        // T·∫°o ph√¢n t√≠ch m·ªõi v·ªõi prompt m·ªõi
        const analysis = await aiService.generateAiSummary(
          userStates[chatId].content, 
          newPrompt
        );
        
        // G·ª≠i k·∫øt qu·∫£
        bot.sendMessage(
          chatId,
          `üìÑ *${userStates[chatId].pageTitle}*\n\n${analysis}\n\n` +
          '_B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi th√™m v·ªÅ n·ªôi dung trang n√†y ho·∫∑c s·ª≠ d·ª•ng /prompt ƒë·ªÉ ƒë·∫∑t prompt m·ªõi._',
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        console.error('L·ªói khi x·ª≠ l√Ω prompt:', error);
        bot.sendMessage(chatId, `ƒê√£ x·∫£y ra l·ªói: ${error.message}`);
      }
    }
  });

  // X·ª≠ l√Ω tin nh·∫Øn th√¥ng th∆∞·ªùng (c√¢u h·ªèi v·ªÅ n·ªôi dung)
  bot.on('message', async (msg) => {
    // B·ªè qua c√°c l·ªánh
    if (msg.text && msg.text.startsWith('/')) return;
    
    const chatId = msg.chat.id;
    const userQuestion = msg.text;
    
    if (!userStates[chatId]) {
      return bot.sendMessage(
        chatId, 
        'Vui l√≤ng ph√¢n t√≠ch m·ªôt trang Confluence tr∆∞·ªõc b·∫±ng l·ªánh /analyze_batch <URL>'
      );
    }
    
    try {
      bot.sendMessage(chatId, 'ƒêang x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n...');
      
      // T·∫°o prompt m·ªõi d·ª±a tr√™n c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
      const questionPrompt = `D·ª±a tr√™n n·ªôi dung trang Confluence, h√£y tr·∫£ l·ªùi c√¢u h·ªèi sau: ${userQuestion}`;
      
      // L∆∞u prompt m·ªõi
      userStates[chatId].lastPrompt = questionPrompt;
      
      // T·∫°o ph√¢n t√≠ch m·ªõi v·ªõi prompt m·ªõi
      const answer = await aiService.generateAiSummary(
        userStates[chatId].content, 
        questionPrompt
      );
      
      // G·ª≠i k·∫øt qu·∫£
      bot.sendMessage(
        chatId,
        `üìÑ *${userStates[chatId].pageTitle}*\n\n${answer}`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      console.error('L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi:', error);
      bot.sendMessage(chatId, `ƒê√£ x·∫£y ra l·ªói: ${error.message}`);
    }
  });

  console.log('Telegram Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!');
  // X·ª≠ l√Ω l·ªánh /set_prompt (t∆∞∆°ng t·ª± /prompt nh∆∞ng d·ªÖ hi·ªÉu h∆°n)
  bot.onText(/\/set_prompt (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const newPrompt = match[1].trim();
    
    // L∆∞u prompt m·ªõi cho ng∆∞·ªùi d√πng
    userStates[chatId] = {
      ...userStates[chatId],
      lastPrompt: newPrompt
    };
    
    bot.sendMessage(
      chatId,
      `‚úÖ *ƒê√£ c·∫≠p nh·∫≠t prompt th√†nh c√¥ng*\n\nPrompt m·ªõi: "${newPrompt}"\n\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng /analyze_batch ƒë·ªÉ ph√¢n t√≠ch trang Confluence v·ªõi prompt n√†y.`,
      { parse_mode: 'Markdown' }
    );
  });
  
  // X·ª≠ l√Ω l·ªánh /analyze_batch
  bot.onText(/\/analyze_batch(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    
    // Ki·ªÉm tra xem ƒë√£ c√≥ URL trong l·ªánh ch∆∞a
    const urlInput = match && match[1] ? match[1].trim() : null;
    
    if (urlInput) {
      // N·∫øu c√≥ URL trong l·ªánh, x·ª≠ l√Ω ngay
      try {
        bot.sendMessage(chatId, 'ƒêang ph√¢n t√≠ch URL...');
        
        // Ph√¢n t√≠ch URL ƒë∆°n
        const urls = [urlInput];
        const results = await batchAnalysisService.analyzeBatch(urls, {
          useAi: true,
          customPrompt: userStates[chatId]?.lastPrompt || 'T√≥m t·∫Øt n·ªôi dung trang n√†y m·ªôt c√°ch ng·∫Øn g·ªçn.'
        });
        
        if (results.successCount > 0) {
          const result = results.results[0];
          
          // L∆∞u tr·ªØ n·ªôi dung trang v√†o tr·∫°ng th√°i ng∆∞·ªùi d√πng ƒë·ªÉ c√≥ th·ªÉ h·ªèi th√™m
          userStates[chatId] = {
            pageId: result.pageId,
            pageTitle: result.pageTitle,
            content: result.content,
            lastPrompt: 'T√≥m t·∫Øt n·ªôi dung trang n√†y m·ªôt c√°ch ng·∫Øn g·ªçn.'
          };
          
          // G·ª≠i k·∫øt qu·∫£
          bot.sendMessage(
            chatId,
            `üìÑ *${result.pageTitle}*\n` +
            `ID: ${result.pageId}\n\n` +
            `${result.summary}\n\n` +
            `üîó [Xem trang g·ªëc](${result.url})\n\n` +
            '_B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi th√™m v·ªÅ n·ªôi dung trang n√†y._',
            { parse_mode: 'Markdown' }
          );
        } else if (results.errors.length > 0) {
          bot.sendMessage(chatId, `‚ö†Ô∏è L·ªói: ${results.errors[0].error}`, { parse_mode: 'Markdown' });
        }
      } catch (error) {
        console.error('L·ªói khi ph√¢n t√≠ch URL:', error);
        bot.sendMessage(chatId, `ƒê√£ x·∫£y ra l·ªói: ${error.message}`);
      }
    } else {
      // N·∫øu kh√¥ng c√≥ URL, y√™u c·∫ßu ng∆∞·ªùi d√πng g·ª≠i danh s√°ch URL
      userStates[chatId] = {
        ...userStates[chatId],
        waitingForBatchUrls: true,
        lastPrompt: 'T√≥m t·∫Øt n·ªôi dung trang n√†y m·ªôt c√°ch ng·∫Øn g·ªçn.' // Prompt m·∫∑c ƒë·ªãnh
      };
      
      bot.sendMessage(
        chatId,
        'Vui l√≤ng g·ª≠i danh s√°ch URL ho·∫∑c ID trang Confluence (m·ªói URL m·ªôt d√≤ng).\n\n' +
        'V√≠ d·ª•:\nhttps://example.atlassian.net/wiki/spaces/ABC/pages/123456\nhttps://example.atlassian.net/wiki/spaces/ABC/pages/789012\n\n' +
        'Ho·∫∑c b·∫°n c√≥ th·ªÉ g·ª≠i danh s√°ch ID trang:\n123456\n789012\n\n' +
        'Ho·∫∑c g·ª≠i m·ªôt URL duy nh·∫•t:\n/analyze_batch https://example.atlassian.net/wiki/spaces/ABC/pages/123456',
        { parse_mode: 'Markdown' }
      );
    }
  });
  
  // X·ª≠ l√Ω khi nh·∫≠n danh s√°ch URL cho ph√¢n t√≠ch h√†ng lo·∫°t
  bot.on('message', async (msg) => {
    // B·ªè qua c√°c l·ªánh
    if (msg.text && msg.text.startsWith('/')) return;
    
    const chatId = msg.chat.id;
    const messageText = msg.text;
    
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ch·ªù g·ª≠i danh s√°ch URL kh√¥ng
    if (userStates[chatId] && userStates[chatId].waitingForBatchUrls) {
      // ƒê·∫∑t l·∫°i tr·∫°ng th√°i ch·ªù URL
      userStates[chatId].waitingForBatchUrls = false;
      
      // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ch·ª©a danh s√°ch URL kh√¥ng
      const urls = messageText.split('\n').filter(url => url.trim() !== '');
      
      if (urls.length === 0) {
        return bot.sendMessage(chatId, 'Kh√¥ng t√¨m th·∫•y URL n√†o. Vui l√≤ng th·ª≠ l·∫°i v·ªõi /analyze_batch');
      }
      
      try {
        bot.sendMessage(chatId, `ƒêang ph√¢n t√≠ch ${urls.length} URL. Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian...`);
        
        // Ph√¢n t√≠ch h√†ng lo·∫°t
        const results = await batchAnalysisService.analyzeBatch(urls, {
          useAi: true,
          customPrompt: userStates[chatId]?.lastPrompt || 'T√≥m t·∫Øt n·ªôi dung trang n√†y m·ªôt c√°ch ng·∫Øn g·ªçn.'
        });
        
        // G·ª≠i th·ªëng k√™
        bot.sendMessage(
          chatId,
          `üìä *K·∫øt qu·∫£ ph√¢n t√≠ch h√†ng lo·∫°t*\n\n` +
          `‚Ä¢ T·ªïng s·ªë URL: ${results.totalProcessed}\n` +
          `‚Ä¢ Th√†nh c√¥ng: ${results.successCount}\n` +
          `‚Ä¢ L·ªói: ${results.errorCount}\n\n` +
          `ƒêang g·ª≠i k·∫øt qu·∫£ ph√¢n t√≠ch...`,
          { parse_mode: 'Markdown' }
        );
        
        // G·ª≠i k·∫øt qu·∫£ ph√¢n t√≠ch t·ªïng h·ª£p n·∫øu c√≥
        if (results.combinedAnalysis) {
          await bot.sendMessage(
            chatId,
            `ü§ñ *Ph√¢n t√≠ch t·ªïng h·ª£p d·ª±a tr√™n prompt*\n\n${results.combinedAnalysis}`,
            { parse_mode: 'Markdown' }
          );
          
          // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ tr√°nh gi·ªõi h·∫°n t·ªëc ƒë·ªô c·ªßa Telegram
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        // G·ª≠i k·∫øt qu·∫£ cho t·ª´ng URL th√†nh c√¥ng
        for (const result of results.results) {
          // Ki·ªÉm tra n·∫øu summary l√† 'S·∫Ω ƒë∆∞·ª£c ph√¢n t√≠ch trong k·∫øt qu·∫£ t·ªïng h·ª£p'
          if (result.summary === 'S·∫Ω ƒë∆∞·ª£c ph√¢n t√≠ch trong k·∫øt qu·∫£ t·ªïng h·ª£p' && results.combinedAnalysis) {
            continue; // B·ªè qua v√¨ ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch trong k·∫øt qu·∫£ t·ªïng h·ª£p
          }
          
          await bot.sendMessage(
            chatId,
            `üìÑ *${result.pageTitle}*\n` +
            `ID: ${result.pageId}\n\n` +
            `${result.summary}\n\n` +
            `üîó [Xem trang g·ªëc](${result.url})`,
            { parse_mode: 'Markdown' }
          );
          
          // ƒê·ª£i m·ªôt ch√∫t gi·ªØa c√°c tin nh·∫Øn ƒë·ªÉ tr√°nh gi·ªõi h·∫°n t·ªëc ƒë·ªô c·ªßa Telegram
          await new Promise(resolve => setTimeout(resolve, 500));
        }
        
        // G·ª≠i danh s√°ch l·ªói n·∫øu c√≥
        if (results.errors.length > 0) {
          let errorMessage = '‚ö†Ô∏è *C√°c l·ªói g·∫∑p ph·∫£i:*\n\n';
          
          results.errors.forEach(error => {
            errorMessage += `‚Ä¢ ${error.url}: ${error.error}\n`;
          });
          
          bot.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown' });
        }
        
        // K·∫øt th√∫c
        bot.sendMessage(
          chatId,
          'Ph√¢n t√≠ch h√†ng lo·∫°t ho√†n t·∫•t. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng /analyze_batch ƒë·ªÉ ph√¢n t√≠ch th√™m URL ho·∫∑c /prompt ƒë·ªÉ ƒë·∫∑t prompt m·ªõi.',
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        console.error('L·ªói khi ph√¢n t√≠ch h√†ng lo·∫°t:', error);
        bot.sendMessage(chatId, `ƒê√£ x·∫£y ra l·ªói: ${error.message}`);
      }
      return;
    }
    
    // X·ª≠ l√Ω c√°c tin nh·∫Øn th√¥ng th∆∞·ªùng (c√¢u h·ªèi v·ªÅ n·ªôi dung)
    // Ch·ªâ x·ª≠ l√Ω n·∫øu kh√¥ng ph·∫£i l√† ph√¢n t√≠ch h√†ng lo·∫°t
    if (userStates[chatId] && userStates[chatId].content) {
      const userQuestion = messageText;
      
      try {
        bot.sendMessage(chatId, 'ƒêang x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n...');
        
        // T·∫°o prompt m·ªõi d·ª±a tr√™n c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
        const questionPrompt = `D·ª±a tr√™n n·ªôi dung trang Confluence, h√£y tr·∫£ l·ªùi c√¢u h·ªèi sau: ${userQuestion}`;
        
        // L∆∞u prompt m·ªõi
        userStates[chatId].lastPrompt = questionPrompt;
        
        // T·∫°o ph√¢n t√≠ch m·ªõi v·ªõi prompt m·ªõi
        const answer = await aiService.generateAiSummary(
          userStates[chatId].content, 
          questionPrompt
        );
        
        // G·ª≠i k·∫øt qu·∫£
        bot.sendMessage(
          chatId,
          `üìÑ *${userStates[chatId].pageTitle}*\n\n${answer}`,
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        console.error('L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi:', error);
        bot.sendMessage(chatId, `ƒê√£ x·∫£y ra l·ªói: ${error.message}`);
      }
    }
  });

  console.log('Telegram Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!');
  return bot;
}

module.exports = {
  initBot
};
